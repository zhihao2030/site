{"IntersectionObserve":"<template>\r\n  <div class=\"intersection-observe\">\r\n    <div class=\"tip\">\r\n      禁用请求缓存，因为用的同一张网络图片\r\n    </div>\r\n      <div class=\"lazy-container\" data-lazySrc=\"https://cdn.pixabay.com/photo/2016/08/17/01/39/mystery-1599527_960_720.jpg\"  :data-key=\"item.id\" v-for=\"item in list\" :key=\"item.id\">\r\n        <img\r\n            alt=\"\"\r\n            v-show=\"item.display\"\r\n            src=\"\"\r\n           />\r\n        <div class=\"loading\" v-loading=\"true\" v-if=\"!item.display\"></div>\r\n      </div>\r\n  </div>\r\n</template>\r\n<script>\r\n\r\nexport default {\r\n    name: 'intersection-observe',\r\n    data: ()=> ({\r\n        list:[],\r\n        observer: {},\r\n        option: {\r\n            root: null,\r\n            rootMargin: '0px',\r\n            threshold: 0\r\n        },\r\n        nodeList: []\r\n    }),\r\n    created() {\r\n        this.init()\r\n        for (let i = 0; i <= 50; i++) {\r\n            this.list.push({\r\n                id: i,\r\n                display: false\r\n            })\r\n        }\r\n    },\r\n    mounted() {\r\n        this.$nextTick(()=>{\r\n            this.init()\r\n        })\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.observer =  new IntersectionObserver(this.observerCallback, this.options);\r\n            this.startOb(this.getNodeList())\r\n        },\r\n        startOb(list) {\r\n            list.forEach(v => this.observer.observe(v))\r\n        },\r\n        observerCallback(entries, observer) {\r\n            // entries观察元素的所有元素信息, observer 被调用的 IntersectionObserve 实例\r\n            entries.forEach(v=> {\r\n                if (v.isIntersecting) {\r\n                    const target = v.target\r\n                    const img = v.target.childNodes[0]\r\n                    const item = this.list[Number(v.target.dataset.key)]\r\n                    img.src = target.dataset.lazysrc\r\n                    item.display = true\r\n                    observer.unobserve(target)\r\n                }\r\n            })\r\n\r\n        },\r\n        getNodeList() {\r\n            return  document.querySelectorAll('.lazy-container')\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n.intersection-observe {\r\n  height: 100%;\r\n  overflow: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  .tip {\r\n    margin: 30px 0;\r\n    font-size: 16px;\r\n    font-weight: 700;\r\n  }\r\n  .lazy-container {\r\n    flex-shrink: 0;\r\n    width: 400px;\r\n    height: 400px;\r\n    margin-bottom: 20px;\r\n    img,.loading {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n    .loading {\r\n      border: 1px solid #c0c0c0;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","http-catch":"<template>\r\n  <div class=\"http-catch\">\r\n    <iframe src=\"http://localhost:9898\" width=\"100%\" height=\"500px\"></iframe>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'http-catch',\r\n    data: () => ({\r\n        htmlData: ''\r\n    }),\r\n    methods: {\r\n\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n\r\n<!--\r\nfetch 返回：\r\n\r\n如果是 json字符串 ，使用 res.json() 方法来将数据转换成 json 格式数据\r\n\r\n  fetch('请求地址').then(res=>{\r\n    return res.json();\r\n  }).then(res=>{\r\n    console.log(res); // 这里得到的就是 json 格式数据\r\n  });\r\n如果是普通的字符串，使用 res.text() 方法将数据转换成普通字符串\r\n\r\n  fetch('请求地址').then(res=>{\r\n    return res.text();\r\n  }).then(res=>{\r\n    console.log(res); // 这里得到的就是普通字符串格式数据\r\n  });\r\n-->\r\n","animate-clock":"<template>\r\n  <div class=\"zzh-time-clock\">\r\n      <time-clock :terminalTime=\"terminalTime\"></time-clock>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport timeClock from '@views/projectMethods/animate-clock/components/time-clock';\r\nexport default {\r\n    name: 'animate-clock',\r\n    data: () => ({\r\n        time: new Date()\r\n    }),\r\n    components: {timeClock},\r\n    computed: {\r\n        terminalTime() {\r\n            if (!this.time) return  new Date()\r\n            return new Date(this.time.setDate(this.time.getDate()+1))\r\n        }\r\n    },\r\n    props: {},\r\n    methods: {}\r\n}\r\n</script>\r\n\r\n<style scoped lang='less'>\r\n.zzh-time-clock {\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n</style>\r\n","animate-card":"<template>\r\n  <div class=\"animate-card\">\r\n    <div class=\"card-group\" v-for=\"(item,idx) in val\" :key=\"idx\" :style=\"{'font-size': size+'px'}\">\r\n      <transition-group enter-active-class=\"animate__animated animate__bounceIn\" leave-active-class=\"animate__animated animate__fadeOutDown\">\r\n        <div class=\"card-item\" :class=\"{'disabled': selfDisabled}\" v-for=\"num in 10\" :key=\"num\" v-show=\"item== num-1\">{{num-1}}</div>\r\n      </transition-group>\r\n    </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'animate-card',\r\n    data: () => ({}),\r\n    props: {\r\n        val: {\r\n            type: Array,\r\n            default: () => ['0', '0'],\r\n        },\r\n        size: {\r\n            type: Number,\r\n            default: 16,\r\n        },\r\n        selfDisabled: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    methods: {}\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.animate-card {\r\n  width: auto;\r\n  display: inline-block;\r\n  height: 100%;\r\n  .card-group {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 40px;\r\n    padding: 5px;\r\n    height: 100%;\r\n    vertical-align: middle;\r\n    .card-item {\r\n      position: absolute;\r\n      background: #3a7fe4;\r\n      color: #fff;\r\n      width: 30px;\r\n      height: 40px;\r\n      top: -20px;\r\n      line-height: 40px;\r\n    }\r\n    .disabled {\r\n      background: #ccc !important;\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n<!--\r\n主要思路是通过 vue 的 transition-group 机制，将 0-9 所有的卡片都渲染好，隐藏起来，\r\n通过 v-show 来触发绑定在 transition-group 上的动画效果，从而实现动态监听数据变化的效果。\r\ntransition-group\r\n-->\r\n","time-clock":"<template>\r\n  <div class=\"animate-clock\">\r\n    <span>距离结束还剩</span>\r\n    <animate-card :val=\"days\" :size=\"16\" :self-disabled=\"disabled\" />\r\n    <span>天</span>\r\n    <animate-card :val=\"hours\" :size=\"16\" :self-disabled=\"disabled\" />\r\n    <span>时</span>\r\n    <animate-card :val=\"minites\" :size=\"16\" :self-disabled=\"disabled\" />\r\n    <span>分</span>\r\n    <animate-card :val=\"seconds\" :size=\"16\" :self-disabled=\"disabled\" />\r\n    <span>秒</span>\r\n  </div>\r\n</template>\r\n<script>\r\nimport animateCard from '@views/projectMethods/animate-clock/components/animate-card';\r\n\r\nexport default {\r\n    name: 'time-clock',\r\n    data: () => ({\r\n        days: ['0', '0'],\r\n        hours: ['0', '0'],\r\n        minites: ['0', '0'],\r\n        seconds: ['0', '0'],\r\n        setIntVal: null,\r\n        disabled: false,\r\n    }),\r\n    props: {\r\n        terminalTime: String,\r\n    },\r\n    components: { animateCard },\r\n    mounted() {\r\n    // 先调用一次\r\n        this.updateClock()\r\n        // 箭头函数不修改当前作用域下的 this 指向\r\n        this.setIntVal = setInterval(() => {\r\n            this.updateClock()\r\n        }, 1000)\r\n    },\r\n    methods: {\r\n        /**\r\n       * 更新计时器\r\n       * @result void\r\n       */\r\n        updateClock() {\r\n            let now = new Date().getTime()\r\n            let stopTime = 0\r\n          console.log(this.terminalTime)\r\n            // 错误入参 处理逻辑\r\n            try {\r\n                stopTime = new Date(this.terminalTime).getTime()\r\n              console.log(stopTime,44);\r\n            } catch (err) {\r\n                console.error(err)\r\n                return false\r\n            }\r\n\r\n            // 终止逻辑\r\n            const remainingTime = stopTime - now\r\n            if (remainingTime < 1000) {\r\n                clearInterval(this.setIntVal)\r\n                this.setIntVal = null\r\n                // 计时器 清零\r\n                this.days = this.hours = this.minites = this.seconds = ['0', '0']\r\n\r\n                this.disabled = true\r\n                console.log('时间到！')\r\n                return false\r\n            }\r\n\r\n            // 计算 日、时、分、秒\r\n            let days = parseInt(remainingTime / (24 * 60 * 60 * 1000))\r\n            let hours = parseInt(\r\n                (remainingTime - 24 * 60 * 60 * 1000 * days) / (60 * 60 * 1000)\r\n            )\r\n            let minites = parseInt(\r\n                (remainingTime - 24 * 60 * 60 * 1000 * days - 60 * 60 * 1000 * hours) /\r\n            (60 * 1000)\r\n            )\r\n            let seconds = parseInt(\r\n                (remainingTime -\r\n                24 * 60 * 60 * 1000 * days -\r\n                60 * 60 * 1000 * hours -\r\n                60 * 1000 * minites) /\r\n            1000\r\n            )\r\n          console.log(days,hours,minites,seconds)\r\n            // 更新 data\r\n            this.days = this.toStringAndUnshiftZero(days)\r\n            this.hours = this.toStringAndUnshiftZero(hours)\r\n            this.minites = this.toStringAndUnshiftZero(minites)\r\n            this.seconds = this.toStringAndUnshiftZero(seconds)\r\n        },\r\n\r\n        /**\r\n       * 转化数字为数组，并在 头部填充 0\r\n       * @params num: numnber\r\n       * @result string[]\r\n       */\r\n        toStringAndUnshiftZero(num) {\r\n            const val = num.toString().split('')\r\n            if (num < 10) {\r\n                val.unshift('0')\r\n            }\r\n            return val\r\n        },\r\n    }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.animate-clock {\r\n  width: 100%;\r\n  text-align: center;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  padding: 40px 0 ;\r\n}\r\n</style>\r\n","card":"<template>\r\n  <div class=\"card-display-container\" @mousedown.stop=\"mousedownCard\" @mouseup.stop=\"mouseupCard\">\r\n    <div v-for=\"(card,index) in list\" :key=\"index\" :class=\"`card my-card-${index}`\" :data-cardIndex=\"index\" :style=\"getStyle(index)\" ref=\"card\">{{index}}</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'card',\r\n    data:()=>({\r\n        cardsInfo: [],\r\n        list: [\r\n            {key:1},\r\n            {key:2},\r\n            {key:4},\r\n            {key:4}\r\n        ],\r\n        cardStyle: {\r\n            left: null,\r\n            top: null\r\n        },\r\n        curPosition: {\r\n            left: null,\r\n            top: null\r\n        },\r\n        stopPosition:{\r\n            left: null,\r\n            top: null\r\n        },\r\n        isMousedown: false,\r\n        throwDistance: 1000,\r\n        throwTriggerDistance:100,\r\n        isThrow:false\r\n    }),\r\n    computed:{\r\n        angle() {\r\n            return  Math.atan2((this.curPosition.left-0), (this.curPosition.top-0));\r\n        },\r\n        left() {\r\n            return Math.cos(this.angle)*this.throwDistance;\r\n        },\r\n        top() {\r\n            return Math.sin(this.angle)*this.throwDistance;\r\n        },\r\n    },\r\n    methods: {\r\n        getStyle(index) {\r\n            return  this.cardsInfo?.[index] || {}\r\n        },\r\n        mousedownCard(v) {\r\n            const {target: {classList,dataset: {cardindex}}} = v.target\r\n            if (!Array.prototype.includes.call(classList,'card')) return // 判断是否点击card\r\n            // get card current position\r\n            const cardNode = this.$refs.card\r\n            const left = cardNode?.offsetLeft\r\n            const top = cardNode?.offsetTop\r\n            const {clientX, clientY} = v\r\n            let disX = clientX - left;\r\n            let disY = clientY - top;\r\n            this.curPosition.left = clientX\r\n            this.curPosition.top = clientY\r\n            document.onmousemove = (e)=>{\r\n                // 鼠标按下并移动的事件\r\n                // 用鼠标的位置减去鼠标相对元素的位置，得到元素的位置\r\n                let left = e.clientX - disX;\r\n                let top = e.clientY - disY;\r\n                // 移动当前元素\r\n                if(left < 0) {\r\n                    left = 0\r\n                }else if(left > window.innerWidth - cardNode.offsetWidth){\r\n                    left = window.innerWidth - cardNode.offsetWidth\r\n                }\r\n\r\n                if(top < 0) {\r\n                    top = 0\r\n                }else if(top > window.innerHeight - cardNode.offsetHeight) {\r\n                    top = window.innerHeight - cardNode.offsetHeight\r\n                }\r\n                this.curPosition.left = left\r\n                this.curPosition.top = top\r\n                this.cardStyle.left = left + 'px'\r\n                this.cardStyle.top = top + 'px'\r\n            };\r\n            document.onmouseup = (e)=>{\r\n                let distance=this.getDistance(0,0,this.curPosition.left,this.curPosition.top);\r\n                console.log(distance,5)\r\n                if(distance>this.throwTriggerDistance){\r\n                    this.makeCardThrow();\r\n                }else{\r\n                    // this.makeCardBack();\r\n                }\r\n                document.onmousemove = null\r\n\r\n            }\r\n        },\r\n        makeCardThrow() {\r\n            console.log(this.angle)\r\n            this.isThrow=true;\r\n            this.cardStyle.left=Math.cos(this.angle)*this.throwDistance;\r\n            this.cardStyle.top=Math.sin(this.angle)*this.throwDistance;\r\n            console.log(this.cardStyle)\r\n        },\r\n        mouseupCard(v) {\r\n            document.onmousemove = null\r\n            const {clientX, clientY} = v\r\n            this.stopPosition.left = clientX\r\n            this.stopPosition.top = clientY\r\n            const distance =this.getDistance(this.curPosition.left,this.curPosition.top,this.left,this.top);\r\n            // if(distance>this.throwTriggerDistance){\r\n            //     this.makeCardThrow();\r\n            // }else{\r\n            //     this.makeCardBack();\r\n            // }\r\n            this.isMousedown =false\r\n        },\r\n        // 计算两点之间的直线距离\r\n        getDistance(x1, y1, x2, y2) {\r\n            var _x = Math.abs(x1 - x2);\r\n            var _y = Math.abs(y1 - y2);\r\n            return Math.sqrt(_x * _x + _y * _y);\r\n        }\r\n\r\n\r\n    },\r\n    mounted() {\r\n    // console.log(this.$refs?.key.style)\r\n    //   this.curPosition.left = this.$refs?.key?.style\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n.card-display-container {\r\n  width: 100%;\r\n  height: calc(100vh - 160px);\r\n  position: relative;\r\n  overflow: hidden;\r\n  .card {\r\n    width: 300px;\r\n    height: 400px;\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    background: white;\r\n    box-shadow: 0 0 17px rgb(0 0 0 / 31%);\r\n    margin: -200px 0 0 -150px;\r\n    text-align: center;\r\n    line-height: 400px;\r\n    font-size: 250px;\r\n    cursor: pointer;\r\n    user-select: none;\r\n    opacity: 1;\r\n    //transition: all 0.3s ease 0s;\r\n  }\r\n  .my-card-0 {\r\n    margin-top: -230px;\r\n    z-index: 3;\r\n    transform: scale(1.1);\r\n  }\r\n  .my-card-1 {\r\n    z-index: 2;\r\n  }\r\n  .my-card-2 {\r\n    margin-top: -170px;\r\n    z-index: 1;\r\n    transform: scale(0.9);\r\n  }\r\n  .my-card-3 {\r\n    margin-top: -140px;\r\n    transform: scale(0.8);\r\n  }\r\n}\r\n</style>\r\n<!--\r\nhttps://juejin.cn/post/6906143905922678797#heading-0\r\nhttps://github.com/taoeer/card/blob/main/index.html\r\n-->\r\n","editEchart":"<template>\r\n    <div class=\"edit-chart item-margin-t\">\r\n      <div class=\"option-chart\">\r\n        <iframe id=\"preview\" frameborder=\"0\" height=\"600px\" width=\"50%\"></iframe>\r\n      </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport {defaultOptions,htmlData} from '@views/projectMethods/editEchart/config';\r\n\r\n\r\nexport default {\r\n    name: 'editEchart',\r\n    data: () => ({\r\n        content: defaultOptions,\r\n        updateData: '',\r\n        htmlScript: '',\r\n        htmlCss: '',\r\n        test: ''\r\n    }),\r\n    components: {\r\n\r\n    },\r\n    watch: {\r\n        updateData: {\r\n            handler(newV, oldV) {\r\n                if (!newV) return\r\n                this.update()\r\n            },\r\n            deep: true,\r\n            immediate: true\r\n        }\r\n    },\r\n    mounted() {\r\n        this.updateData = defaultOptions\r\n        this.update()\r\n    },\r\n    methods: {\r\n        updateOptions(v) {\r\n            this.updateData = v\r\n        },\r\n        update(html) {\r\n            this.test = htmlData(html,'','test',this.updateData,this.$echarts)\r\n            const preview = document.getElementById('preview')\r\n            console.log(this.test)\r\n            preview.setAttribute('srcdoc', this.test);\r\n        }\r\n\r\n    }\r\n    // computed: {\r\n    //     option\r\n    // }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n.edit-chart {\r\n  .option-chart {\r\n    display: flex;\r\n    .code-edit{\r\n      width: 50%;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","edit-input":"<template>\r\n   <div class=\"cell\">\r\n     <el-input ref=\"elInputRef\"  size=\"mini\" v-model.trim=\"cellValue\" placeholder=\"请输入内容\" @blur=\"handleInputBlur\" />\r\n   </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: {\r\n        cellValue: {\r\n            type: [String, Number],\r\n            default: ''\r\n        },\r\n        editDone: Function,\r\n        rowData: Object,\r\n        property: String,\r\n        cellDom: Node\r\n    },\r\n    data() {\r\n        return {\r\n            input: ''\r\n        }\r\n    },\r\n    mounted() {\r\n        console.log(this)\r\n        // 用户双击后，让其处于获取焦点的状态\r\n        this.$refs.elInputRef.focus();\r\n    },\r\n    methods:{\r\n        handleInputBlur() {\r\n            this.editDone({\r\n                cellValue: this.cellValue,\r\n                cellDom: this.cellDom,\r\n                row: this.rowData,\r\n                property: this.property,\r\n            })\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n.cell {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  padding: 0 8px;\r\n}\r\n</style>\r\n","edit-span":"<template>\r\n  <span class=\"cell\">{{ cellValue }}</span>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    // name: 'edit-span',\r\n    props: {\r\n        cellValue: {\r\n            type: [String, Number],\r\n            default: '',\r\n        },\r\n    },\r\n};\r\n</script>\r\n","editTable":"<template>\r\n<div>\r\n  <el-table\r\n      @cell-dblclick=\"dblclick\"\r\n      :cell-class-name=\"cellClassName\"\r\n      :data=\"tableData\"\r\n      style=\"width: 100%\">\r\n    <el-table-column\r\n        prop=\"date\"\r\n        label=\"日期\"\r\n        width=\"180\">\r\n    </el-table-column>\r\n    <el-table-column\r\n        prop=\"name\"\r\n        label=\"姓名\"\r\n        width=\"180\">\r\n    </el-table-column>\r\n    <el-table-column\r\n        prop=\"address\"\r\n        label=\"地址\">\r\n    </el-table-column>\r\n  </el-table>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport {InputConstructor,SpanConstructor} from '@views/projectMethods/editTable/editComponents';\r\n\r\nexport default {\r\n    name: 'editTable',\r\n    data() {\r\n        return {\r\n            tableData: [{\r\n                date: '2016-05-02',\r\n                name: '王小虎',\r\n                address: '上海市普陀区金沙江路 1518 弄'\r\n            }, {\r\n                date: '2016-05-04',\r\n                name: '王小虎',\r\n                address: '上海市普陀区金沙江路 1517 弄'\r\n            }, {\r\n                date: '2016-05-01',\r\n                name: '王小虎',\r\n                address: '上海市普陀区金沙江路 1519 弄'\r\n            }, {\r\n                date: '2016-05-03',\r\n                name: '王小虎',\r\n                address: '上海市普陀区金沙江路 1516 弄'\r\n            }]\r\n        }\r\n    },\r\n    methods: {\r\n        dblclick(row, column, cell, event) {\r\n            console.log(row)\r\n            if (row.isEdit) return\r\n            row.isEdit = true\r\n            row.oldCellValue = row[column['property']]\r\n            const input = new InputConstructor({\r\n                propsData:{\r\n                    cellValue: row.oldCellValue, // 传递单元格的值\r\n                    editDone: this.editDone, // 传递回调函数用于保存行数据，组件中可以触发之\r\n                    cellDom: cell, // 传递这个dom元素\r\n                    rowData: row, // 传递双击的行的数据\r\n                    property: column.property, // 传递双击的是哪个字段\r\n                }\r\n            }).$mount(cell.children[0])\r\n            console.log(input,777)\r\n        },\r\n        cellClassName({ row, column, rowIndex, columnIndex }) {\r\n            row.index = rowIndex; // 自定义指定一个索引，下方能够用到\r\n        },\r\n        editDone(params) {\r\n            params.row.isEdit = false\r\n            if (params.cellValue === params.row.oldCellValue) {\r\n                console.log('未修改数据');\r\n            } else {\r\n                console.log(params.property + params.row.oldCellValue +'修改为' + params.cellValue )\r\n                params.row[params.property] = params.cellValue;\r\n                // 这里模拟一下发了请求，得到最新表体数据以后，更新tableData\r\n                setTimeout(() => {\r\n                    //        给那个数组的     第几项            修改为什么值\r\n                    this.$set(this.tableData, params.row.index, params.row);\r\n                }, 300);\r\n            }\r\n\r\n            new SpanConstructor({\r\n                propsData:{\r\n                    cellValue: params.cellValue, // 传递单元格的值\r\n                }\r\n            }).$mount(params.cellDom.children[0]) // 覆盖原本cell\r\n        },\r\n    }\r\n}\r\n</script>\r\n","Embedded":"<template>\n  <iframe ref=\"frame\" :src=\"src\" style=\"min-height: calc(100vh - 185px); width:100%; border: 0\" />\n</template>\n\n<script>\nimport axios from 'axios';\n/**\n * 嵌入式预览，可支持任意网页任意情况的嵌入\n * 本实例主要展示通过axios获取二进制数据然后推送到预览页的情况\n */\nexport default {\n    name: 'Embedded',\n    data() {\n        return {\n            src: '',\n        };\n    },\n    methods: {\n        loadFromUrl() {\n            // 要预览的文件地址\n            const url = 'https://flyfish.group/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E7%AC%94%E8%AE%B0(1).docx';\n            // 查看器的源，当前示例为本源\n            const viewerOrigin = location.origin;\n            // 拼接iframe请求url\n            this.src = `${viewerOrigin}?name=${encodeURIComponent(name)}&from=${encodeURIComponent(location.origin)}`;\n            this.$nextTick(() => {\n                const frame = this.$refs.frame;\n                frame.onload = () => {\n                    axios({\n                        url,\n                        method: 'get',\n                        responseType: 'blob',\n                    }).then(data => {\n                        if (!data) {\n                            console.error('文件下载失败');\n                        }\n                        console.log(data)\n                        frame.contentWindow.postMessage(data, viewerOrigin);\n                    })\n                }\n            })\n        }\n    }\n}\n</script>\n\n<style scoped>\n\n</style>\n","fileView":"<template>\r\n  <div :class=\"{ hidden }\">\r\n    <div class=\"banner\">\r\n      <div class=\"container\">\r\n        <h1>\r\n          <div>\r\n            在线文档查看\r\n            <input class=\"file-select\" type=\"file\" @change=\"handleChange\" />\r\n          </div>\r\n        </h1>\r\n      </div>\r\n    </div>\r\n    <div class=\"container\">\r\n      <div v-show=\"loading\" class=\"well loading\">正在加载中，请耐心等待...</div>\r\n      <div v-show=\"!loading\" class=\"well\" ref=\"output\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getExtend, readBuffer, render } from './components/util';\r\nimport { parse } from 'qs';\r\n\r\n/**\r\n * 支持嵌入式显示，基于postMessage支持跨域\r\n * 示例代码：\r\n *\r\n */\r\nexport default {\r\n    name: 'HelloWorld',\r\n    props: {\r\n        msg: String,\r\n    },\r\n    data() {\r\n        return {\r\n            // 加载状态跟踪\r\n            loading: false,\r\n            // 上个渲染实例\r\n            last: null,\r\n            // 隐藏头部，当基于消息机制渲染，将隐藏\r\n            hidden: false,\r\n        };\r\n    },\r\n    created() {\r\n    // 允许使用预留的消息机制发送二进制数据，必须在url后添加?name=xxx.xxx&from=xxx\r\n        const { from, name } = parse(location.search.substr(1));\r\n        if (from) {\r\n            window.addEventListener('message', (event) => {\r\n                const { origin, data: blob } = event;\r\n                if (origin === from && blob instanceof Blob) {\r\n                    // 构造响应，自动渲染\r\n                    const file = new File([blob], name, {});\r\n                    this.hidden = true;\r\n                    this.handleChange({ target: { files: [file] } });\r\n                }\r\n            });\r\n        }\r\n    },\r\n    methods: {\r\n        async handleChange(e) {\r\n            this.loading = true;\r\n            try {\r\n                const [file] = e.target.files;\r\n                const arrayBuffer = await readBuffer(file);\r\n                this.loading = false;\r\n                this.last = await this.displayResult(arrayBuffer, file);\r\n            } catch (e) {\r\n                console.error(e);\r\n            } finally {\r\n                this.loading = false;\r\n            }\r\n        },\r\n        displayResult(buffer, file) {\r\n            // 取得文件名\r\n            const { name } = file;\r\n            // 取得扩展名\r\n            const extend = getExtend(name);\r\n            // 输出目的地\r\n            const { output } = this.$refs;\r\n            // 生成新的dom\r\n            const node = document.createElement('div');\r\n            // 添加孩子，防止vue实例替换dom元素\r\n            if (this.last) {\r\n                output.removeChild(this.last.$el);\r\n                this.last.$destroy();\r\n            }\r\n            const child = output.appendChild(node);\r\n            // 调用渲染方法进行渲染\r\n            return new Promise((resolve, reject) =>\r\n                render(buffer, extend, child).then(resolve).catch(reject)\r\n            );\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n.banner {\r\n  overflow: auto;\r\n  text-align: center;\r\n  /* background-color: #12b6ff; */\r\n  color: #000;\r\n}\r\n\r\n.hidden .banner {\r\n  display: none;\r\n}\r\n\r\n.hidden .well {\r\n  height: calc(100vh - 12px);\r\n}\r\n\r\n.file-select {\r\n  //position: absolute;\r\n  left: 5%;\r\n  top: 17px;\r\n  margin-left: 20px;\r\n}\r\n\r\n.banner div {\r\n  color: #000;\r\n}\r\n\r\n.banner h1 {\r\n  font-size: 20px;\r\n  line-height: 2;\r\n  margin: 0.5em 0;\r\n}\r\n\r\n.well {\r\n  display: block;\r\n  background-color: #f2f2f2;\r\n  border: 1px solid #ccc;\r\n  margin: 5px;\r\n  width: calc(100% - 12px);\r\n  height: calc(100vh - 73px);\r\n  overflow: auto;\r\n}\r\n\r\n.loading {\r\n  text-align: center;\r\n  padding-top: 50px;\r\n}\r\n\r\n.messages .warning {\r\n  color: #cc6600;\r\n}\r\n</style>\r\n\r\n<style>\r\n.pptx-wrapper {\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n}\r\n</style>\r\n","ImageViewer":"<template>\n  <viewer :images=\"images\" style=\"height: 800px;\">\n    <img v-for=\"item in images\" alt=\"图片\" :src=\"item.src\" :key=\"item.index\" class=\"image\" />\n  </viewer>\n</template>\n\n<script>\nexport default {\n    name: 'ImageViewer',\n    props: {\n        image: String,\n    },\n    computed: {\n        images() {\n            return this.image ? [{ src: this.image }] : [];\n        }\n    }\n}\n</script>\n\n<style scoped>\n.image {\n  display: block;\n  width: auto;\n  height: 100%;\n  margin: 0 auto;\n}\n</style>\n","PdfView":"<template>\n  <div class=\"home_wrap\">\n    <div class=\"pdf_down\">\n      <div class=\"pdf_set_left\" @click=\"scaleD()\">➕</div>\n      <div class=\"pdf_set_middle\" @click=\"scaleX()\">➖</div>\n      <!-- <div class=\"pdf-pre\" @click=\"prePage\">上一页</div> -->\n      <!-- <div class=\"pdf-next\" @click=\"nextPage\">下一页</div> -->\n    </div>\n    <div :style=\"{ width: pdf_div_width, margin: '0 auto' }\">\n      <!-- <canvas id=\"the_canvas\"></canvas> -->\n      <canvas\n        v-for=\"page in pdf_pages\"\n        :id=\"'the_canvas' + page\"\n        :key=\"page\"\n      ></canvas>\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as PDFJS from 'pdfjs-dist/legacy/build/pdf';\n// const PDFJS = { GlobalWorkerOptions: {} };\n\nPDFJS.GlobalWorkerOptions.workerSrc = require('pdfjs-dist/legacy/build/pdf.worker.entry.js');\n\nexport default {\n    name: 'PdfView',\n    props: {\n        data: ArrayBuffer,\n    },\n    data() {\n        return {\n            pdf_scale: 1.0, // pdf放大系数\n            pdf_pages: [],\n            pdf_div_width: '',\n            currentPage: 1,\n        };\n    },\n    mounted() {\n        this.loadFile();\n    },\n    methods: {\n        scaleD() {\n            // 放大\n            let max = 0;\n            if (window.screen.width > 1440) {\n                max = 1.4;\n            } else {\n                max = 1.2;\n            }\n            if (this.pdf_scale >= max) {\n                return;\n            }\n            this.pdf_scale = this.pdf_scale + 0.1;\n            this.loadFile();\n        },\n        scaleX() {\n            // 缩小\n            let min = 1.0;\n            if (this.pdf_scale <= min) {\n                return;\n            }\n            this.pdf_scale = this.pdf_scale - 0.1;\n            this.loadFile();\n        },\n        async loadFile() {\n            // 初始化pdf\n            console.log('初始化pdf');\n            this.pdfDoc = await PDFJS.getDocument(this.data).promise;\n            this.pdf_pages = this.pdfDoc.numPages;\n            this.$nextTick(() => this.renderPage());\n        },\n        async renderPage(num = 1) {\n            this.currentPage = num;\n            // 渲染pdf页\n            console.log('渲染pdf页');\n            const page = await this.pdfDoc.getPage(num);\n            const canvas = document.getElementById('the_canvas' + num);\n            // const canvas = document.getElementById(\"the_canvas\");\n            const ctx = canvas.getContext('2d');\n            const dpr = window.devicePixelRatio || 1;\n            const bsr =\n        ctx.webkitBackingStorePixelRatio ||\n        ctx.mozBackingStorePixelRatio ||\n        ctx.msBackingStorePixelRatio ||\n        ctx.oBackingStorePixelRatio ||\n        ctx.backingStorePixelRatio ||\n        1;\n            const ratio = dpr / bsr;\n            const viewport = page.getViewport({ scale: this.pdf_scale });\n            canvas.width = viewport.width * ratio;\n            canvas.height = viewport.height * ratio;\n            canvas.style.width = viewport.width + 'px';\n            this.pdf_div_width = viewport.width + 'px';\n            canvas.style.height = viewport.height + 'px';\n            ctx.setTransform(ratio, 0, 0, ratio, 0, 0);\n            const renderContext = {\n                canvasContext: ctx,\n                viewport: viewport,\n            };\n            page.render(renderContext);\n            if (this.pdf_pages > num) {\n                setTimeout(() => {\n                    return this.renderPage(num + 1);\n                });\n            }\n        },\n        nextPage() {\n            if (this.pdf_pages > this.currentPage) {\n                this.renderPage(this.currentPage + 1);\n            }\n        },\n        prePage() {\n            if (this.currentPage > 1) {\n                this.renderPage(this.currentPage - 1);\n            }\n        },\n    },\n};\n</script>\n\n<style scoped>\n.home_wrap {\n  width: 100%;\n  height: 100%;\n}\n.home_wrap .pdf_down {\n  position: fixed;\n  display: flex;\n  z-index: 20;\n  right: 26px;\n  bottom: 7%;\n  cursor: pointer;\n}\n.home_wrap .pdf-pre {\n  position: fixed;\n  display: flex;\n  z-index: 20;\n  right: 160px;\n  bottom: 9%;\n  cursor: pointer;\n}\n.home_wrap .pdf-next {\n  position: fixed;\n  display: flex;\n  z-index: 20;\n  right: 100px;\n  bottom: 9%;\n}\n.home_wrap .pdf_down .pdf_set_left {\n  width: 30px;\n  height: 40px;\n  color: #408fff;\n  font-size: 15px;\n  padding-top: 25px;\n  text-align: center;\n  margin-right: 5px;\n  cursor: pointer;\n}\n.home_wrap .pdf_down .pdf_set_middle {\n  width: 30px;\n  height: 40px;\n  color: #408fff;\n  font-size: 15px;\n  padding-top: 25px;\n  text-align: center;\n  margin-right: 5px;\n  cursor: pointer;\n}\n</style>\n","CodeViewer":"<template>\n  <pre class=\"code-area\">\n    {{ value }}\n  </pre>\n</template>\n\n<script>\nexport default {\n    name: 'CodeEditor',\n    props: {\n        value: {\n            type: String,\n            description: '值'\n        }\n    },\n};\n</script>\n\n<style scoped>\n.code-area {\n  display: block;\n  margin: 0 auto;\n  font-size: 12px;\n  width: 1000px;\n  min-height: 500px;\n  background: #1f1f1f;\n  word-break: break-word;\n  white-space: break-spaces;\n  color: #5af117\n}\n</style>\n","Table":"<template>\n  <div>\n    <div>\n      <hot-table ref=\"table\" :settings=\"hotSettings\"></hot-table>\n    </div>\n    <div class=\"btn-group\">\n      <button\n        v-for=\"sheet in sheets\"\n        :key=\"sheet.id\"\n        style=\"padding: 0 30px\"\n        :type=\"sheetIndex === sheet.id ? 'primary' : 'default'\"\n        @click=\"handleSheet(sheet.id)\"\n      >\n        {{ sheet.name }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { HotTable } from '@handsontable/vue';\nimport Handsontable from 'handsontable';\nimport { registerLanguageDictionary, zhCN } from 'handsontable/i18n';\nimport { indexedColors } from './color';\nimport { camelCase, captain, fixMatrix } from './util';\n\n// 注册中文\nregisterLanguageDictionary(zhCN);\n\n// 边框类型\nconst borders = ['left', 'right', 'top', 'bottom'];\n\nexport default {\n    name: 'HelloWorld',\n    props: {\n        msg: String,\n        workbook: Object,\n    },\n    components: { HotTable },\n    data() {\n        return {\n            sheetIndex: 0,\n            selection: {\n                style: {},\n                ranges: [],\n            },\n        };\n    },\n    created() {\n    // 注册自定义渲染\n        Handsontable.renderers.registerRenderer(\n            'styleRender',\n            (hotInstance, TD, row, col, prop, value, cell) => {\n                Handsontable.renderers.getRenderer('text')(\n                    hotInstance,\n                    TD,\n                    row,\n                    col,\n                    prop,\n                    value,\n                    cell\n                );\n                if (this.ws && cell.style) {\n                    const {\n                        style: { alignment: { wrapText } = {}, border, fill, font },\n                    } = cell;\n                    const style = TD.style;\n                    if (font) {\n                        if (font.bold) style.fontWeight = 'bold';\n                        if (font.size) style.fontSize = `${font.size}px`;\n                    }\n                    if (fill) {\n                        if (fill.bgColor) {\n                            const { argb, indexed } = fill.bgColor;\n                            style.backgroundColor = `#${argb || indexedColors[indexed]}`;\n                        }\n                        if (fill.fgColor) {\n                            const { theme, indexed } = fill.fgColor;\n                            if (theme && this.themeColors) {\n                                const color = this.themeColors[theme + 1];\n                                if (color) {\n                                    style.color = `#${color}`;\n                                }\n                            }\n                            if (indexed) {\n                                style.color = `#${indexedColors[indexed]}`;\n                            }\n                        }\n                    }\n                    if (border) {\n                        borders\n                            .map((key) => ({ key, value: border[key] }))\n                            .filter((v) => v.value)\n                            .forEach((v) => {\n                                const {\n                                    key,\n                                    value: { style: borderStyle },\n                                } = v;\n                                const prefix = `border${captain(key)}`;\n                                if (borderStyle === 'thin') {\n                                    style[`${prefix}Width`] = '1px';\n                                } else {\n                                    style[`${prefix}Width`] = '2px';\n                                }\n                                style[`${prefix}Style`] = 'solid';\n                                style[`${prefix}Color`] = '#000';\n                            });\n                    }\n                }\n                // 启用了内联css，直接赋值\n                if (cell.css) {\n                    const style = TD.style;\n                    const { css } = cell;\n                    Object.keys(css).forEach((key) => {\n                        const k = camelCase(key);\n                        style[k] = css[key];\n                    });\n                }\n            }\n        );\n    },\n    watch: {\n        workbook() {\n            this.parseTheme();\n            this.updateTable();\n        },\n    },\n    computed: {\n        hotSettings() {\n            return {\n                language: 'zh-CN',\n                readOnly: true,\n                data: this.data,\n                cell: this.cell,\n                mergeCells: this.merge,\n                colHeaders: true,\n                rowHeaders: true,\n                height: 'calc(100vh - 107px)',\n                // contextMenu: true,\n                // manualRowMove: true,\n                // 关闭外部点击取消选中时间的行为\n                outsideClickDeselects: false,\n                // fillHandle: {\n                //   direction: 'vertical',\n                //   autoInsertRow: true\n                // },\n                // afterSelectionEnd: this.afterSelectionEnd,\n                // bindRowsWithHeaders: 'strict',\n                licenseKey: 'non-commercial-and-evaluation',\n            };\n        },\n        ws() {\n            const { workbook: { getWorksheet } = {} } = this;\n            if (getWorksheet) {\n                const index = this.sheetIndex || this.sheets[0].id;\n                return this.workbook.getWorksheet(index);\n            }\n            return null;\n        },\n        sheets() {\n            if (this.workbook.worksheets) {\n                return this.workbook.worksheets.filter((sheet) => sheet._rows.length);\n            }\n            return [];\n        },\n        merge() {\n            const { ws: { _merges: merges = {} } = {} } = this;\n            return Object.values(merges).map(({ left, top, right, bottom }) => {\n                // 构建区域\n                return {\n                    row: top - 1,\n                    col: left - 1,\n                    rowspan: bottom - top + 1,\n                    colspan: right - left + 1,\n                };\n            });\n        },\n        data() {\n            return fixMatrix(\n                this.ws.getRows(1, this.ws.actualRowCount).map((row) =>\n                    row._cells.map((item) => {\n                        const value = item.model.value;\n                        if (value) {\n                            return value.richText ? value.richText.text : value;\n                        }\n                        return '';\n                    })\n                ),\n                this.cols.length\n            );\n        },\n        cols() {\n            return this.ws.columns.map((item) => item.letter);\n        },\n        columns() {\n            return this.ws.columns.map((item) => ({\n                ...(item.width\n                    ? { width: item.width < 100 ? 100 : item.width }\n                    : { width: 100 }),\n                className: this.alignToClass(item.alignment || {}),\n                renderer: 'styleRender',\n            }));\n        },\n        cell() {\n            return this.ws.getRows(1, this.ws.actualRowCount).flatMap((row, ri) => {\n                return row._cells\n                    .map((cell, ci) => {\n                        if (cell.style) {\n                            return {\n                                row: ri,\n                                col: ci,\n                                ...(cell.alignment\n                                    ? { className: this.alignToClass(cell.alignment) }\n                                    : {}),\n                                style: cell.style,\n                            };\n                        }\n                    })\n                    .filter((i) => i);\n            });\n        },\n        border() {\n            return this.ws.getRows(1, this.ws.actualRowCount).flatMap((row, ri) => {\n                return row._cells\n                    .map((cell, ci) => {\n                        if (cell.style && cell.style.border) {\n                            const border = cell.style.border;\n                            const keys = Object.keys(border);\n                            if (keys.length) {\n                                return {\n                                    row: ri,\n                                    col: ci,\n                                    ...keys.reduce((result, key) => {\n                                        result[key] = {\n                                            width: 1,\n                                            color: `#${\n                                                (border.color && indexedColors[border.color.indexed]) ||\n                        border.argb ||\n                        '000000'\n                                            }`,\n                                        };\n                                        return result;\n                                    }, {}),\n                                };\n                            }\n                        }\n                    })\n                    .filter((i) => i);\n            });\n        },\n    },\n    methods: {\n        hotTable() {\n            return this.$refs.table.hotInstance;\n        },\n        updateTable() {\n            this.hotTable().updateSettings({\n                mergeCells: this.merge,\n                data: this.data,\n                colHeaders: this.cols,\n                columns: this.columns,\n                cell: this.cell,\n                // customBorders: this.border,\n            });\n        },\n        alignToClass({ horizontal, vertical }) {\n            return [horizontal, vertical]\n                .filter((i) => i)\n                .map((key) => `ht${key.charAt(0).toUpperCase()}${key.slice(1)}`)\n                .join(' ');\n        },\n        parseTheme() {\n            const theme = this.workbook._themes.theme1;\n            const parser = new DOMParser();\n            if (theme) {\n                const doc = parser.parseFromString(theme, 'text/xml');\n                const [{ children = [] } = {}] =\n          doc.getElementsByTagName('a:clrScheme');\n                this.themeColors = [...children]\n                    .flatMap((node) => [...node.getElementsByTagName('a:srgbClr')])\n                    .map((node) => node.getAttribute('val'))\n                    .filter((i) => i);\n            }\n        },\n        // 切换sheet\n        handleSheet(index) {\n            if (this.sheetIndex !== index) {\n                this.sheetIndex = index;\n                this.$nextTick(() => {\n                    this.updateTable();\n                });\n            }\n        },\n        // 处理样式\n        handleStyle(style, { type, key }) {\n            this.selection.style = style;\n            const hot = this.hotTable();\n            // 暂停自定义渲染逻辑\n            hot.suspendRender();\n            this.selection.ranges.forEach(({ r, c }) => {\n                const { css = {} } = hot.getCellMeta(r, c);\n                const merged = { ...css };\n                // 差量赋值，按照excel标准\n                if (type === 'remove') {\n                    delete merged[key];\n                } else if (type === 'add') {\n                    merged[key] = style[key];\n                }\n                hot.setCellMetaObject(r, c, {\n                    css: merged,\n                });\n            });\n            // 手动渲染\n            hot.render();\n            // 恢复自动渲染逻辑\n            hot.resumeRender();\n        },\n        // 选中区域回调\n        afterSelectionEnd(row, column, row2, column2, selectionLayerLevel) {\n            const ranges = [];\n            for (let r = row; r <= row2; r++) {\n                for (let c = column; c <= column2; c++) {\n                    ranges.push({ r, c });\n                }\n            }\n            // 获得左上角的元数据，初始化一些状态\n            const { css = {} } = this.hotTable().getCellMeta(row, column);\n            this.selection.style = css;\n            this.selection.ranges = ranges;\n        },\n    },\n};\n</script>\n\n<style>\n.handsontable {\n  font-size: 13px;\n  color: #222;\n}\n</style>\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.sheet-btn.active {\n  background-color: aquamarine;\n}\n\n.btn-group {\n  margin-top: 5px;\n  display: block;\n  border-bottom: 1px solid grey;\n  background-color: lightblue;\n}\n\n.table-tool {\n  padding: 8px 0;\n  border-top: 1px solid black;\n}\n</style>\n","input-toolTip":"<template>\r\n  <div class=\"input-toolTip\">\r\n    <el-tooltip placement=\"top\" :content=\"value\" :disabled=\"notShow\">\r\n      <el-input v-model=\"value\" @mouseover.native=\"mouseoverInput\" />\r\n    </el-tooltip>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'inputToolTip',\r\n    data: () => ({\r\n        value: null,\r\n        notShow: true\r\n    }),\r\n    props: {},\r\n    methods: {\r\n        mouseoverInput({target: {scrollWidth,offsetWidth}}) {\r\n            console.log(scrollWidth,offsetWidth)\r\n            this.notShow = scrollWidth < offsetWidth\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped lang='less'>\r\n.input-toolTip {\r\n  width: 20%;\r\n}\r\n</style>\r\n","encapsulationDate":"<template>\r\n  <div class=\"block\">\r\n    <!--    <span class=\"demonstration\">选择日期：</span>-->\r\n    <el-date-picker\r\n        v-model=\"value\"\r\n        ref=\"datePick\"\r\n        type=\"daterange\"\r\n        :format ='format'\r\n        :value-format='valueFormat'\r\n        @change=\"change\"\r\n        align=\"right\"\r\n        unlink-panels\r\n        range-separator=\"至\"\r\n        start-placeholder=\"开始日期\"\r\n        end-placeholder=\"结束日期\"\r\n        :picker-options=\"pickerOptions\">\r\n    </el-date-picker>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'encapsulationDate',\r\n    props: {\r\n        format: {\r\n            type: String,\r\n            default: 'yyyy/MM/dd'\r\n        },\r\n        valueFormat: {\r\n            type: String,\r\n            default: 'yyyy-MM-dd'\r\n        },\r\n        pickerOptions: {\r\n            type: Object,\r\n            default: () => {\r\n                return {\r\n                    shortcuts: [\r\n                        {\r\n                            text: '今年以来',\r\n                            onClick (picker) {\r\n                                const end = new Date()\r\n                                const start = new Date()\r\n                                start.setDate(1)\r\n                                start.setMonth(0)\r\n                                picker.$emit('pick', [start, end])\r\n                            }\r\n                        },\r\n                        {\r\n                            text: '近一年',\r\n                            onClick (picker) {\r\n                                const end = new Date()\r\n                                const start = new Date()\r\n                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 365)\r\n                                picker.$emit('pick', [start, end])\r\n                            }\r\n                        },\r\n                        {\r\n                            text: '近半年',\r\n                            onClick (picker) {\r\n                                const end = new Date()\r\n                                const start = new Date()\r\n                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 180)\r\n                                picker.$emit('pick', [start, end])\r\n                            }\r\n                        }, {\r\n                            text: '近三月',\r\n                            onClick (picker) {\r\n                                const end = new Date()\r\n                                const start = new Date()\r\n                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 90)\r\n                                picker.$emit('pick', [start, end])\r\n                            }\r\n                        },\r\n                        {\r\n                            text: '近一个月',\r\n                            onClick (picker) {\r\n                                const end = new Date()\r\n                                const start = new Date()\r\n                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 30)\r\n                                picker.$emit('pick', [start, end])\r\n                            }\r\n                        },\r\n                        {\r\n                            text: '近两周',\r\n                            onClick (picker) {\r\n                                const end = new Date()\r\n                                const start = new Date()\r\n                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 14)\r\n                                picker.$emit('pick', [start, end])\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    },\r\n    data () {\r\n        return {\r\n            value: ''\r\n        }\r\n    },\r\n    created () {\r\n        this.value = this.getNowTime()\r\n    },\r\n    methods: {\r\n        change (e) {\r\n            this.$emit('change', e)\r\n            // 保证在选择完时间后，日期弹出框不会消失\r\n            /* this.$refs.datePick.focus();\r\n            this.value = e;*/\r\n        },\r\n        // 初始默认执行(重点)\r\n        getNowTime () {\r\n            const start = new Date(new Date().getTime() - 3600 * 1000 * 1)\r\n                .toISOString()\r\n                .replace('T', ' ')\r\n                .split('.')[0]\r\n            const end = new Date(new Date().getTime() + 3600 * 1000 * 24 * 365)\r\n                .toISOString()\r\n                .replace('T', ' ')\r\n                .split('.')[0]\r\n            return [start, end]\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n","speedyDate":"<template>\r\n  <div>\r\n    <encapsulation-date :format='time'></encapsulation-date>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport encapsulationDate from './components/encapsulationDate'\r\nexport default {\r\n    name: 'index',\r\n    components:{encapsulationDate},\r\n    data (){\r\n        return {\r\n            time: 'yyyy-MM-dd',\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","tab1":"<template>\r\n  <div class=\"tab\">\r\n    <div>\r\n      <div style=\"margin-bottom: 20px\">\r\n        当前tab名称： {{name}}\r\n      </div>\r\n      <div>\r\n        当前radeo label： {{radio}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'tab1',\r\n    props: {\r\n        radio: {\r\n            type: Number,\r\n            default: 1\r\n        },\r\n        name: {\r\n            type: String,\r\n            default: ''\r\n        }\r\n    },\r\n    methods: {\r\n        getList() {\r\n            console.log(`${this.name} 的第 ${this.radio} 发送请求`)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.tab {\r\n  width: 100%;\r\n  height: calc(100vh - 269px);\r\n  background: greenyellow;\r\n  font-size: 40px;\r\n  font-weight: 700;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n</style>\r\n","tab2":"<template>\r\n  <div class=\"tab\">\r\n    <div>\r\n      <div style=\"margin-bottom: 20px\">\r\n        当前tab名称： {{name}}\r\n      </div>\r\n      <div>\r\n        当前radeo label： {{radio}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'tab2',\r\n    props: {\r\n        radio: {\r\n            type: Number,\r\n            default: 1\r\n        },\r\n        name: {\r\n            type: String,\r\n            default: ''\r\n        }\r\n    },\r\n    methods: {\r\n        getList() {\r\n            console.log(`${this.name} 的第 ${this.radio} 发送请求`)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.tab {\r\n  width: 100%;\r\n  height: calc(100vh - 269px);\r\n  background: green;\r\n  font-size: 40px;\r\n  font-weight: 700;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n</style>\r\n","tab3":"<template>\r\n  <div class=\"tab\">\r\n      <div>\r\n        <div style=\"margin-bottom: 20px\">\r\n          当前tab名称： {{name}}\r\n        </div>\r\n        <div>\r\n          当前radeo label： {{radio}}\r\n        </div>\r\n      </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'tab3',\r\n    props: {\r\n        radio: {\r\n            type: Number,\r\n            default: 1\r\n        },\r\n        name: {\r\n            type: String,\r\n            default: ''\r\n        }\r\n    },\r\n    methods: {\r\n        getList() {\r\n            console.log(`${this.name} 的第 ${this.radio} 发送请求`)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.tab {\r\n  width: 100%;\r\n  height: calc(100vh - 269px);\r\n  background: pink;\r\n  font-size: 40px;\r\n  font-weight: 700;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n</style>\r\n","tabsLevelTwo":"<template>\r\n  <div class=\"tabsLevelTwo box-wrap-pd\">\r\n    <div class=\"tab-header\">\r\n      <div class=\"tabs\">\r\n        <el-button :type=\"cpData.key === item.key ? 'primary' : 'info'\" @click=\"change(item)\" class=\"item-margin-right\" v-for=\"item in list\" :key=\"item.key\">{{item.name}}</el-button>\r\n      </div>\r\n      <div class=\"radio\">\r\n        <el-radio-group v-model=\"radio\" @change=\"changeRadio\">\r\n          <el-radio :label=\"1\">全部</el-radio>\r\n          <el-radio :label=\"2\">备选项111</el-radio>\r\n          <el-radio :label=\"3\">备选项222</el-radio>\r\n          <el-radio :label=\"4\">备选项222</el-radio>\r\n        </el-radio-group>\r\n      </div>\r\n      <div class=\"content\">\r\n          <component\r\n              :ref=\"cpData.name\"\r\n              :name=\"cpData.name\"\r\n              :radio=\"cpData.radioIns\"\r\n              :is=\"cpData.tab\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport tab1 from '@views/projectMethods/tabsLevelTwo/components/tab1';\r\nimport tab2 from '@views/projectMethods/tabsLevelTwo/components/tab2';\r\nimport tab3 from '@views/projectMethods/tabsLevelTwo/components/tab3';\r\nexport default {\r\n    name: 'tabsLevelTwo',\r\n    data: ()=> ({\r\n        list: [\r\n            {name: 'tab1',radioIns: 1, tab: tab1, key: 1},\r\n            {name: 'tab2',radioIns: 1, tab: tab2,key: 2},\r\n            {name: 'tab3',radioIns: 1, tab: tab3, key: 3},\r\n        ],\r\n        radio: 1,\r\n        cpData: {\r\n            tab: tab1,\r\n            radioIns: 1,\r\n            name: '',\r\n            key: 1,\r\n        }\r\n    }),\r\n    components: {\r\n        tab1,\r\n        tab2,\r\n        tab3\r\n    },\r\n    mounted() {\r\n\r\n    },\r\n    methods: {\r\n        changeRadio(v) {\r\n            const tab = this.list.find(v=> v.key === this.cpData.key)\r\n            // 记录当前tab的rado\r\n            tab.radioIns = v\r\n            this.cpData.radioIns = v\r\n            setTimeout(()=>{\r\n                const tabRef = this.$refs[tab.name]\r\n                tabRef && tabRef.getList()\r\n            })\r\n        },\r\n        change(item) {\r\n            this.cpData = {...item}\r\n            // 重置ui\r\n            this.radio = item.radioIns\r\n            // 发送请求\r\n            setTimeout(()=>{\r\n                const tabRef = this.$refs[item.name]\r\n                tabRef && tabRef.getList()\r\n            })\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n.radio {\r\n  margin: 20px 0;\r\n}\r\n</style>\r\n","my-editor":"<template>\r\n  <div>\r\n    <tinymce-editor\r\n        :id=\"tinymceId\"\r\n        :value=\"content\"\r\n        :init=\"init\"\r\n        :witdh=\"width\"\r\n        :height=\"height\"\r\n        :resize=\"resize\"\r\n        :disabled=\"disabled\"\r\n        @input=\"onInput\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport 'tinymce/tinymce'\r\nimport TinymceEditor from '@tinymce/tinymce-vue'\r\n// 引入配置信息\r\nimport defaultConfig from './config'\r\n\r\n\r\nexport default {\r\n    name: 'Editor',\r\n    components: { TinymceEditor },\r\n    props: {\r\n        id: {\r\n            type: String,\r\n            default: function() {\r\n                // 这个id一定要写，否则会出现莫名其妙的问题。\r\n                return 'tinymce-' + Date.now() + Math.floor(Math.random() * 1000)\r\n            }\r\n        },\r\n        // 内容\r\n        content: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        // 是否禁用\r\n        disabled: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        // 宽度\r\n        width: {\r\n            type: [String, Number],\r\n            default: '100%'\r\n        },\r\n        // 高度\r\n        height: {\r\n            type: [String, Number],\r\n            default: 450\r\n        },\r\n        // 是否允许拖动\r\n        resize: {\r\n            type: [String, Boolean],\r\n            default: true\r\n        },\r\n        // 菜单栏\r\n        menubar: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        // 工具栏\r\n        toolbar: {\r\n            type: String,\r\n            default: ''\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            tinymceId: this.id,\r\n            init: Object.assign(defaultConfig, {\r\n                // 组件值覆盖默认配置\r\n                width: this.width,\r\n                height: this.height,\r\n                resize: this.resize,\r\n                menubar: !this.menubar ? defaultConfig.menubar : this.menubar,\r\n                toolbar: !this.toolbar ? defaultConfig.toolbar : this.toolbar\r\n            })\r\n        }\r\n    },\r\n    methods: {\r\n        onInput(content) {\r\n            this.$emit('update:content', content)\r\n        }\r\n    }\r\n}\r\n</script>\r\n","test":"<template>\r\n  <editor :content.sync=\"content\"  />\r\n</template>\r\n\r\n<script>\r\nimport editor from './my-editor'\r\nexport default {\r\n    name: 'test',\r\n    components:{editor},\r\n    data(){\r\n        return {\r\n            content: ''\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","virtualScrollTable":"<template>\r\n<div class=\"virtualScrollTable\">\r\n  <div class=\"btn\">\r\n    <el-button @click=\"show = !show\">\r\n      {{!show? '点击渲染无虚拟滚动10000' : '点击渲染虚拟滚动100000'}}\r\n    </el-button>\r\n  </div>\r\n  <card title=\"使用虚拟滚动渲染100000条数据\"  v-if=\"!show\">\r\n    <template #content>\r\n      <el-table\r\n          key=\"2\"\r\n          :isVirtual=\"true\"\r\n          :data=\"tableData\"\r\n          tableKey=\"testTable\"\r\n          Theight=\"500\"\r\n          :itemHeight=\"48\"\r\n          border\r\n          style=\"width: 100%\">\r\n        <el-table-column\r\n            prop=\"date\"\r\n            label=\"日期\">\r\n        </el-table-column>\r\n        <el-table-column\r\n            prop=\"date\"\r\n            label=\"日期\">\r\n        </el-table-column>\r\n        <el-table-column\r\n            prop=\"date\"\r\n            label=\"日期\">\r\n        </el-table-column>\r\n        <el-table-column\r\n            prop=\"name\"\r\n            label=\"姓名\">\r\n        </el-table-column>\r\n        <el-table-column\r\n            prop=\"address\"\r\n            label=\"地址\">\r\n        </el-table-column>\r\n        <el-table-column\r\n            prop=\"address\"\r\n            label=\"地址\">\r\n        </el-table-column>\r\n      </el-table>\r\n    </template>\r\n  </card>\r\n\r\n  <card title=\"不使用虚拟滚动渲染10000条数据\" v-if=\"show\">\r\n    <template #content>\r\n      <el-table\r\n          key=\"1\"\r\n          :isVirtual=\"false\"\r\n          :data=\"tableData.slice(1,10000)\"\r\n          border\r\n          height=\"500\"\r\n          style=\"width: 100%\">\r\n        <el-table-column\r\n            prop=\"date\"\r\n            label=\"日期\">\r\n        </el-table-column>\r\n        <el-table-column\r\n            prop=\"date\"\r\n            label=\"日期\">\r\n        </el-table-column>\r\n        <el-table-column\r\n            prop=\"date\"\r\n            label=\"日期\">\r\n        </el-table-column>\r\n        <el-table-column\r\n            prop=\"name\"\r\n            label=\"姓名\">\r\n        </el-table-column>\r\n        <el-table-column\r\n            prop=\"address\"\r\n            label=\"地址\">\r\n        </el-table-column>\r\n        <el-table-column\r\n            prop=\"address\"\r\n            label=\"地址\">\r\n        </el-table-column>\r\n      </el-table>\r\n    </template>\r\n  </card>\r\n<!--isVirtual：开启虚拟列表； Theight： 表格高度； itemHeight: 表格行高；tableKey: 表格key（必填）    -->\r\n\r\n</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'virtualScrollTable',\r\n    data() {\r\n        return {\r\n            show: false,\r\n            tableData: [{\r\n                date: '2016-05-03',\r\n                name: '王小虎',\r\n                address: '上海市普陀区金沙江路 1518 弄'\r\n            }, {\r\n                date: '2016-05-02',\r\n                name: '王小虎',\r\n                address: '上海市普陀区金沙江路 1518 弄'\r\n            }, {\r\n                date: '2016-05-04',\r\n                name: '王小虎',\r\n                address: '上海市普陀区金沙江路 1518 弄'\r\n            }, {\r\n                date: '2016-05-01',\r\n                name: '王小虎',\r\n                address: '上海市普陀区金沙江路 1518 弄'\r\n            }, {\r\n                date: '2016-05-08',\r\n                name: '王小虎',\r\n                address: '上海市普陀区金沙江路 1518 弄'\r\n            }, {\r\n                date: '2016-05-06',\r\n                name: '王小虎',\r\n                address: '上海市普陀区金沙江路 1518 弄'\r\n            }, {\r\n                date: '2016-05-07',\r\n                name: '王小虎',\r\n                address: '上海市普陀区金沙江路 1518 弄'\r\n            }]\r\n        }\r\n    },\r\n    mounted() {\r\n        for (let i = 0; i< 100000; i ++){\r\n\r\n            this.tableData.push({\r\n                date: i,\r\n                name: i + 100,\r\n                address: i +1000\r\n            })\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.btn{\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n</style>\r\n","vueEeditorWrap":"<template>\r\n    <uEditor :vlaue.sync=\"content\" :config=\"editorConfig\"  editor-id=\"editor-demo-01\"/>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'vueEeditorWrap',\r\n    data: () => ({\r\n        content: '',\r\n        editorConfig: {\r\n        // 访问 UEditor 静态资源的根路径，可参考 https://hc199421.gitee.io/vue-ueditor-wrap/#/faq\r\n            UEDITOR_HOME_URL: '/UEditor/',\r\n            // 服务端接口（这个地址是我为了方便各位体验文件上传功能搭建的临时接口，请勿在生产环境使用！！！）\r\n            serverUrl: '//ueditor.zhenghaochuan.com/cos',\r\n        },\r\n    }),\r\n    props: {},\r\n    methods: {}\r\n}\r\n</script>\r\n\r\n<style scoped lang='scss'>\r\n\r\n</style>\r\n","testMarkdown":"<template>\r\n   <div class=\"testMarkdown\">\r\n     <div class=\"ui\">\r\n       <onlineEdit title=\"测试jsEditor\"/>\r\n     </div>\r\n   </div>\r\n</template>\r\n\r\n<script>\r\nimport onlineEdit from '@/components/onlineEdit/onlineEdit'\r\nexport default {\r\n    name: 'testMarkdown',\r\n    data: () => ({\r\n        jsonCode: ''\r\n    }),\r\n    components: {\r\n        onlineEdit\r\n    },\r\n    mounted() {\r\n\r\n    },\r\n    computed: {\r\n\r\n    },\r\n    methods: {\r\n        handleJsonChange(v) {\r\n            console.log(v)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","vue-extend":"<template>\r\n  <div>\r\n    <button @click=\"openModal\">全局模态框</button>\r\n    <button @click=\"openModal2\">全局成功模态框</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n    name: 'vue-extend',\r\n    methods: {\r\n        openModal() {\r\n            this.$messageBox.show({\r\n                title: '通过this调用',\r\n                content: '源文件在plugin中,以插件形式封装',\r\n                type: 'warn'\r\n            })\r\n        },\r\n        openModal2() {\r\n            this.$messageBox.primary({\r\n                title: '全局成功模态框',\r\n                content: '源文件在plugin中,以插件形式封装',\r\n            })\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","codeEditor":"<template>\r\n  <div class=\"json-editor\">\r\n    <div class=\"header\">\r\n      {{title}}\r\n    </div>\r\n    <textarea :ref=\"refName\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CodeMirror from 'codemirror';\r\nimport 'codemirror/lib/codemirror.css';\r\n\r\nimport 'codemirror/theme/idea.css';\r\n// 括号显示匹配\r\nimport 'codemirror/addon/edit/matchbrackets';\r\nimport 'codemirror/addon/selection/active-line';\r\n// 括号、引号编辑和删除时成对出现\r\nimport 'codemirror/addon/edit/closebrackets';\r\n// 折叠代码要用到一些玩意\r\nimport 'codemirror/addon/fold/foldgutter.css';\r\nimport 'codemirror/addon/fold/foldgutter';\r\nimport 'codemirror/addon/fold/xml-fold';\r\nimport 'codemirror/addon/fold/foldcode';\r\nimport 'codemirror/addon/fold/brace-fold';\r\nimport 'codemirror/addon/fold/indent-fold.js';\r\nimport 'codemirror/addon/fold/markdown-fold.js';\r\nimport 'codemirror/addon/fold/comment-fold.js';\r\n\r\nimport 'codemirror/mode/javascript/javascript.js'\r\nimport 'codemirror/mode/css/css.js'\r\nimport 'codemirror/mode/xml/xml.js'\r\nimport 'codemirror/mode/swift/swift.js'\r\nimport 'codemirror/mode/vue/vue.js'\r\n\r\nimport 'codemirror/addon/hint/show-hint.css'\r\nimport 'codemirror/addon/hint/show-hint'\r\nimport 'codemirror/addon/hint/javascript-hint'\r\n\r\nexport default {\r\n    name: 'codeEditor',\r\n    components: {},\r\n    props: {\r\n        jsonCode: {\r\n            type: String,\r\n            default: '',\r\n        },\r\n        title: {\r\n            type: String,\r\n            default: 'CodeEditor',\r\n        },\r\n        readonly: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        refName: {\r\n            type: String,\r\n            default:'editor'\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            editor: '',\r\n        };\r\n    },\r\n    watch: {\r\n        jsonCode(newVal) {\r\n            console.log(newVal)\r\n            const editorValue = this.editor.getValue();\r\n            if (newVal !== editorValue) {\r\n                this.editor.setValue(\r\n                    // 这里是json格式化\r\n                    newVal\r\n                    // JSON.stringify(JSON.parse(this.jsonCode), null, 2)\r\n                );\r\n                setTimeout(() => {\r\n                    this.editor.refresh();\r\n                }, 1);\r\n            }\r\n        },\r\n        immediate: true,\r\n        deep: true,\r\n    },\r\n    mounted() {\r\n        this.editor = CodeMirror.fromTextArea(this.$refs[this.refName], {\r\n            mode: 'javascript',\r\n            theme: 'idea', // 主题样式\r\n            lint: true,\r\n            tabSize: 2,\r\n            smartIndent: true, // 是否智能缩进\r\n            styleActiveLine: true, // 当前行高亮\r\n            hintOptions: {\r\n                completeSingle: false,\r\n                alignWithWord: false,\r\n                // javascript-hint提供的自动完成的方法。此处可以自定义\r\n                hint: CodeMirror.hint.javascript\r\n            },\r\n            lineNumbers: true, // 显示行号\r\n            gutters: [\r\n                'CodeMirror-linenumbers',\r\n                'CodeMirror-foldgutter',\r\n                'CodeMirror-lint-markers',\r\n            ],\r\n            lineWrapping: true, // 自动换行\r\n            matchBrackets: true, // 括号匹配显示\r\n            autoCloseBrackets: true, // 输入和退格时成对\r\n            readOnly: this.readonly, // 只读\r\n            foldGutter: true,\r\n            fontSize: 17\r\n        });\r\n        // 这里是json格式化\r\n        this.editor.setValue(this.jsonCode);\r\n        this.editor.on('change', cm => {\r\n            this.$emit('change', cm.getValue());\r\n        });\r\n        this.editor.on('keypress', (instance) => {\r\n        // 在键盘事件的时候触发showHint显示自动完成提示框\r\n            instance.showHint();\r\n        // hintOptions配置也可以在此时进行设置\r\n        // instance.showHint({\r\n        //   completeSingle: false,\r\n        //   alignWithWord: false,\r\n        //   hint: CodeMirror.hint.javascript\r\n        // });\r\n        })\r\n    },\r\n    methods: {\r\n    // 这玩意就是为了刷新编辑器的\r\n        refresh() {\r\n            /*\r\n       * refresh: Fires when the editor is refreshed or resized.\r\n       * Mostly useful to invalidate cached values that depend on the editor or character size.\r\n       */\r\n            this.editor && this.editor.refresh();\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n\r\n<style lang=\"less\">\r\n//http://t.zoukankan.com/cndarren-p-14691392.html\r\n// 高度自适应 不能设置scope\r\n.json-editor {\r\n  height: 100%;\r\n  position: relative;\r\n  border: 1px solid #cdcdcd;\r\n  border-radius: 3px;\r\n  .header {\r\n    padding: 0.5rem 1rem;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-bottom: 1px solid #cdcdcd;;\r\n    height: 36px;\r\n    background: #fff;\r\n  }\r\n}\r\n/* 高度自适应 */\r\n.json-editor .CodeMirror {\r\n  height:auto!important;\r\n}\r\n.json-editor .CodeMirror-scroll {\r\n  height: auto;\r\n  overflow-y: hidden;\r\n  overflow-x: auto;\r\n}\r\n\r\n.CodeMirror-foldgutter-folded.CodeMirror-guttermarker-subtle {\r\n  color: black !important;\r\n  font-size: 14px;\r\n}\r\n.CodeMirror-foldgutter-open:after {\r\n  color: black !important;\r\n  font-size: 14px;\r\n}\r\n.json-editor .cm-string {\r\n  color: coral !important;\r\n}\r\n.json-editor .CodeMirror-line {\r\n  height: 24px !important;\r\n  line-height: 24px !important;\r\n}\r\n</style>\r\n\r\n","codeTab":"<template>\r\n  <el-tabs v-model=\"ins\" type=\"border-card\" @tab-click=\"handleClick\">\r\n    <el-tab-pane\r\n        v-for=\"(item, index) in list\"\r\n        :key=\"index\"\r\n        :label=\"`${item.name}.vue`\"\r\n        :name=\"`${index}`\">\r\n      <code-editor\r\n          :title=\"`${item.name}.vue`\"\r\n          :ref=\"item.name\"\r\n          :refName=\"item.name\"\r\n          :jsonCode=\"item.value\"\r\n          :readonly=\"true\"\r\n      />\r\n    </el-tab-pane>\r\n  </el-tabs>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'codeTab',\r\n    props: {\r\n        list: {\r\n            type:Array,\r\n            default:()=> ([])\r\n        }\r\n    },\r\n    data: function() {\r\n        return {\r\n            ins:'0'\r\n        };\r\n    },\r\n    methods:{\r\n        handleClick(tab){\r\n            setTimeout(()=>{\r\n                tab.$children[0].refresh()\r\n            })\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","displayMarkdown":"<template>\r\n  <div class=\"markdown-body\" v-html=\"htmlFile\" v-highlight ></div>\r\n</template>\r\n\r\n<script>\r\nimport {marked} from 'marked'\r\nexport default {\r\n    name: 'markdown',\r\n    props: {\r\n        htmlFile: {\r\n            default: ''\r\n        }\r\n    },\r\n    data: () => ({\r\n        htmlData: ''\r\n    }),\r\n    watch: {\r\n        html(v) {\r\n            if (!v) return\r\n            this.htmlData = marked(v)\r\n        }\r\n    },\r\n    mounted() {\r\n\r\n    },\r\n    methods: {\r\n\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","docTab":"<template>\r\n  <el-tabs type=\"border-card\">\r\n    <el-tab-pane v-for=\"(item, index) in list\"  :key=\"index\" :label=\"item.name\">\r\n      <markdown :htmlFile=\"item.value\" />\r\n    </el-tab-pane>\r\n  </el-tabs>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'docTab',\r\n    props: {\r\n        list: {\r\n            type:Array,\r\n            default:()=> ([])\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","echart":"<template>\r\n    <div :id=\"`echarts-${id}`\" :style=\"style\"></div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'chart',\r\n    props: {\r\n        id: {\r\n            type: [String, Number],\r\n            default: 'default'\r\n        },\r\n        width: {\r\n            type: String,\r\n            default: '100%'\r\n        },\r\n        height: {\r\n            type: String,\r\n            default: '300px'\r\n        },\r\n        option: {\r\n            type: Object,\r\n            // Object类型的prop值一定要用函数return出来，不然会报错。原理和data是一样的，\r\n            // 使用闭包保证一个vue实例拥有自己的一份props\r\n            default: () => ({\r\n                title: {\r\n                    text: 'Echarts'\r\n                },\r\n                legend: {\r\n                    data: ['销量']\r\n                },\r\n                xAxis: {\r\n                    data: ['衬衫', '羊毛衫', '雪纺衫', '裤子', '高跟鞋', '袜子','tuoxie']\r\n                },\r\n                yAxis: {\r\n                    type: 'value'\r\n                },\r\n                series: [\r\n                    {\r\n                        name: '销量',\r\n                        type: 'line',\r\n                        data: [5, 20, 36, 10, 10, 70]\r\n                    }\r\n                ]\r\n\r\n            })\r\n        }\r\n    },\r\n    data:() => ({\r\n        // echarts实例\r\n        chart: ''\r\n    }),\r\n    computed: {\r\n        style() {\r\n            return {\r\n                height: this.height,\r\n                width: this.width\r\n            }\r\n        }\r\n    },\r\n    watch: {\r\n        option: {\r\n            handler(newVal, oldVal) {\r\n                if (this.chart) {\r\n                    if (newVal) {\r\n                        this.chart.setOption(newVal);\r\n                    }\r\n                    else {\r\n                        this.chart.setOption(oldVal);\r\n                    }\r\n                }\r\n                else {\r\n                    this.init();\r\n                }\r\n            },\r\n            deep: true // 对象内部属性的监听，关键。\r\n        }\r\n\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.chart = this.$echarts.init(document.getElementById(`echarts-${this.id}`))\r\n            this.chart.setOption(this.option)\r\n            // 图表无据窗口大小进行自动缩放\r\n            window.addEventListener('resize', this.chart.resize);\r\n        }\r\n\r\n    },\r\n    mounted() {\r\n        this.init();\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","iframeVm":"<template>\r\n  <div class=\"iframeVm\">\r\n    <iframe :srcdoc=\"src\" frameborder=\"0\" v-show=\"false\"></iframe>\r\n    <div class=\"header\">\r\n      <div class=\"title\">\r\n        控制台\r\n      </div>\r\n        <el-button type=\"primary\" plain @click=\"run\">运行</el-button>\r\n        <el-button type=\"warning\" style=\"margin-right: 10px\"  plain @click=\"$emit('clear')\">清空</el-button>\r\n    </div>\r\n    <div class=\"result-area\">\r\n      <div class=\"logBox\">\r\n        <div class=\"logRow\" v-for=\"(log, index) in logList\" :key=\"index\">\r\n          <template v-for=\"(logItem, itemIndex) in log.data\">\r\n            <div\r\n                class=\"logItem json\"\r\n                v-if=\"['object', 'array'].includes(logItem.contentType)\"\r\n                v-html=\"logItem.content\"\r\n                @click=\"jsonClick\"\r\n            ></div>\r\n            <!-- 基本数据类型 -->\r\n            <div v-else class=\"logItem message\" :class=\"[logItem.contentType]\" v-html=\"logItem.content\"></div>\r\n          </template>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {iframeHtml} from './config'\r\nexport default {\r\n    name: 'iframeVm',\r\n    data: ()=>({\r\n        src: '',\r\n        expandIndex: 0\r\n    }),\r\n    props: {\r\n        iframeSrc: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        logList: {\r\n            type: Array,\r\n            default: ()=>([])\r\n        }\r\n    },\r\n    computed: {\r\n\r\n    },\r\n    methods: {\r\n        run() {\r\n            if(!this.iframeSrc) {\r\n                return this.$messageBox.error({\r\n                    title: '错误',\r\n                    content: '代码为空，请填写代码',\r\n                })\r\n            }\r\n            this.src = iframeHtml()\r\n            setTimeout(()=>{\r\n                this.src = iframeHtml(this.iframeSrc)\r\n            })\r\n\r\n        },\r\n        getChildByClassName(el, className){\r\n            let children = el.children\r\n            for (let i = 0; i < children.length; i++) {\r\n                if (children[i].classList.contains(className)) {\r\n                    return children[i]\r\n                }\r\n            }\r\n            return null\r\n        },\r\n        jsonClick(e) {\r\n        // 点击是展开收缩按钮\r\n            if (e.target && e.target.classList.contains('expandBtn')) {\r\n                let target = e.target\r\n                let parent = target.parentNode\r\n                // id，每个展开收缩按钮唯一的标志\r\n                let index = target.getAttribute('data-index')\r\n                if (index === null) {\r\n                    index = this.expandIndex++\r\n                    target.setAttribute('data-index', index)\r\n                }\r\n                // 获取当前状态，0表示收缩、1表示展开\r\n                let status = target.getAttribute('expand-status') || '1'\r\n                // 在子节点里找到wrap元素\r\n                let wrapEl = this.getChildByClassName(parent, 'wrap')\r\n                // 找到下层所有的按钮节点\r\n                let btnEls = wrapEl.querySelectorAll('.expandBtn')\r\n                // 收缩状态 -> 展开状态\r\n                if (status === '0') {\r\n                    // 设置状态为展开\r\n                    target.setAttribute('expand-status', '1')\r\n                    // 展开\r\n                    wrapEl.style.height = 'auto'\r\n                    // 按钮箭头旋转\r\n                    target.classList.remove('shrink')\r\n                    // 移除省略号元素\r\n                    let ellipsisEl = this.getChildByClassName(parent, 'ellipsis')\r\n                    parent.removeChild(ellipsisEl)\r\n                    // 显示下级展开收缩按钮\r\n                    for (let i = 0; i < btnEls.length; i++) {\r\n                        let _index = btnEls[i].getAttribute('data-for-index')\r\n                        // 只有被当前按钮收缩的按钮才显示\r\n                        if (_index === index) {\r\n                            btnEls[i].removeAttribute('data-for-index')\r\n                            btnEls[i].style.display = 'inline-block'\r\n                        }\r\n                    }\r\n                } else if (status === '1') {\r\n                    // 展开状态 -> 收缩状态\r\n                    target.setAttribute('expand-status', '0')\r\n                    wrapEl.style.height = 0\r\n                    target.classList.add('shrink')\r\n                    let ellipsisEl = document.createElement('div')\r\n                    ellipsisEl.textContent = '...'\r\n                    ellipsisEl.className = 'ellipsis'\r\n                    parent.insertBefore(ellipsisEl, wrapEl)\r\n                    for (let i = 0; i < btnEls.length; i++) {\r\n                        let _index = btnEls[i].getAttribute('data-for-index')\r\n                        // 只隐藏当前可以被隐藏的按钮\r\n                        if (_index === null) {\r\n                            btnEls[i].setAttribute('data-for-index', index)\r\n                            btnEls[i].style.display = 'none'\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n.iframeVm {\r\n  width: 100%;\r\n  height: 100%;\r\n  border-left: 1px solid #cdcdcd;;\r\n  border-right: 1px solid #cdcdcd;;\r\n  border-bottom: 1px solid #cdcdcd;;\r\n  overflow-y: hidden;\r\n  .result-area {\r\n    width: 100%;\r\n    height: calc(100% - 36px);\r\n    overflow-y: auto;\r\n    //background: #b3d4fc;\r\n    .logBox {\r\n      .logRow {\r\n        border-bottom: 1px solid #5a5f73;\r\n        padding: 7px 10px 5px;\r\n        margin-bottom: 0;\r\n        display: flex;\r\n\r\n        &.error {\r\n          background: rgba(255, 0, 0, 0.2) !important;\r\n        }\r\n\r\n        &.warn {\r\n          background: rgba(235, 255, 0, 0.15);\r\n        }\r\n\r\n        .logItem {\r\n          display: inline-block;\r\n          margin-right: 10px;\r\n\r\n          &.message {\r\n            color: #fff;\r\n            white-space: pre-wrap;\r\n\r\n            &.string {\r\n              color: #ce9178;\r\n            }\r\n\r\n            &.number {\r\n              color: #b5cea8;\r\n            }\r\n\r\n            &.boolean,\r\n            &.null,\r\n            &.undefined {\r\n              color: #569cd6;\r\n            }\r\n\r\n            &.symbol {\r\n              color: #3dc9b0;\r\n            }\r\n            &.error {\r\n              color: #b70b0b;\r\n            }\r\n          }\r\n\r\n          &.json {\r\n            line-height: 22px;\r\n            color: #999999;\r\n            padding-left: 20px;\r\n            position: relative;\r\n\r\n            /deep/ .expandBtn {\r\n              position: absolute;\r\n              left: 0;\r\n              cursor: pointer;\r\n              transform: rotateZ(90deg);\r\n              transition: all 0.3s;\r\n              line-height: 22px;\r\n\r\n              &.shrink {\r\n                transform: rotateZ(0deg);\r\n              }\r\n            }\r\n\r\n            /deep/ .wrap {\r\n              overflow: hidden;\r\n            }\r\n\r\n            /deep/ .object,\r\n            /deep/ .array {\r\n              margin-left: 20px;\r\n            }\r\n\r\n            /deep/ .bracket {\r\n              color: #999999;\r\n            }\r\n\r\n            /deep/ .key {\r\n              color: #e06c75;\r\n            }\r\n\r\n            /deep/ .colon {\r\n              color: #999999;\r\n              margin: 0 5px;\r\n            }\r\n\r\n            /deep/ .string,\r\n            /deep/ .symbol {\r\n              color: #98c379;\r\n            }\r\n\r\n            /deep/ .number {\r\n              color: #d19a66;\r\n            }\r\n\r\n            /deep/ .boolean,\r\n            /deep/ .null,\r\n            /deep/ .undefined {\r\n              color: #56b6c2;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .header {\r\n    padding: 0.5rem 1rem;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    border-bottom: 1px solid #cdcdcd;;\r\n    border-top: 1px solid #cdcdcd;;\r\n    height: 36px;\r\n    background: #fff;\r\n    position: relative;\r\n    .title {\r\n      position: absolute;\r\n      top: 19px;\r\n      left: 1rem;\r\n      font-weight: 600;\r\n      font-size: 16px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","onlineEdit":"<template>\r\n  <div class=\"online-edit\" :style=\"{height: editHeight}\">\r\n    <div class=\"js-edit\">\r\n      <code-editor\r\n          :title=\"title\"\r\n          ref=\"jsEditor\"\r\n          :jsonCode=\"jsonCode\"\r\n          :readonly=\"false\"\r\n          @change=\"handelChange\"\r\n      />\r\n    </div>\r\n    <div class=\"run\">\r\n      <iframeVm :iframe-src=\"jsonCode\" :logList=\"logList\" @clear=\" logList = [] \"/>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport iframeVm from '@/components/iframeVm/iframeVm'\r\n\r\nexport default {\r\n    name: 'onlineEdit',\r\n    data: () => ({\r\n        jsonCode: '',\r\n        logList: []\r\n    }),\r\n    components: {\r\n        iframeVm\r\n    },\r\n    props: {\r\n        title: {\r\n            type: String\r\n        },\r\n        height: {\r\n            type: String,\r\n            default: '400'\r\n        }\r\n    },\r\n    computed: {\r\n        editHeight() {\r\n            return this.height.includes('px') ? this.height : this.height + 'px'\r\n        }\r\n    },\r\n    methods: {\r\n        handelChange(v) {\r\n            this.jsonCode = v\r\n        }\r\n    },\r\n    created() {\r\n        // 监听iframe信息\r\n        window.addEventListener('message', ({ data = {} }) => {\r\n            if (data.type === 'console')\r\n                this.logList.push({\r\n                    type: data.method,// console的方法名\r\n                    data: data.data,// 要显示的信息，一个数组，可能同时打印多条信息\r\n                    res:data.res\r\n                })\r\n            console.log(this.logList,999)\r\n        })}\r\n\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n.online-edit {\r\n  display: flex;\r\n  width: 100%;\r\n  .js-edit {\r\n    width: 48%;\r\n  }\r\n  .run {\r\n    width: 48%;\r\n  }\r\n  justify-content: space-between;\r\n  /deep/.CodeMirror {\r\n    height: calc(100% - 53px) !important;\r\n    overflow-y: hidden !important;\r\n  }\r\n  /deep/.CodeMirror-scroll {\r\n    height: 100% !important;\r\n    overflow-y: auto !important;\r\n  }\r\n}\r\n</style>\r\n","uEditor":"<template>\r\n  <vue-ueditor-wrap v-model=\"msg\" :config=\"config\"  :editor-id=\"editorId\"></vue-ueditor-wrap>\r\n</template>\r\n\r\n<script>\r\nimport VueUeditorWrap from 'vue-ueditor-wrap';\r\nexport default {\r\n    name: 'uEditor',\r\n    data: () => ({}),\r\n    computed: {\r\n        msg: {\r\n            get() {\r\n                return this.value\r\n            },\r\n            set(v) {\r\n                this.$emit('update:value',v)\r\n            }\r\n        }\r\n    },\r\n    components: {VueUeditorWrap},\r\n    props: {\r\n        value: String,\r\n        config: Object,\r\n        editorId: {\r\n            type: String,\r\n            required: true\r\n        }\r\n    },\r\n    methods: {}\r\n}\r\n</script>\r\n\r\n<style scoped lang='scss'>\r\n\r\n</style>\r\n"}